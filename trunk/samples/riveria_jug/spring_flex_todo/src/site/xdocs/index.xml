<?xml version="1.0"?>
<document>
    <properties>
        <author>Francois Le Droff</author>
        <title>Flex N Spring</title>
    </properties>
     
    <body>
        <section name="Flex N Spring">
			
			<p>
			 A sample project based on an Adobe Consulting Maven Archetype : blazeds-autowired-spring-hibernate-archetype.
  			</p>
  			<p>
  			<a href="http://code.google.com/p/fna/wiki/blazedsAutowiredSpringHibernateArchetype">
  			Blazeds-autowired-spring-hibernate-archetype</a> generates a template for a flex front end application 
  			communicating with the backend through Adobe's blazeds messaging.
  			The backend relies on a spring hibernate architecture. Here is a screenshot :
  			</p>
			<p>
                <img align="left" alt="Screenshot of this sample app" src="images/app-todo_max.jpg"/>
            </p>

        </section>

        <section name="Modules">
        
        <subsection name="bash_java_core">
        <p>
        <a href="bash_java_core/index.html">bash_java_core</a> holds the java back-end :
        the core services implementations (based on spring) as well as the DAO layer (based on hibernate JPA). 
		The default db is set to be hsqldb (unit tests are performed through dbunit).
    	Note that the spring service implementation exposed to a flex front-end are annotated with @Service.
    	These Java5 annotations will lead to blazeDS service configuration auto-wiring (thanks to flex-contrib-spring)  
         </p>        
        </subsection>
        
        <subsection name="bash_java_service_api">
        <p>
        <a href="bash_java_service_api/index.html">bash_java_service_api</a>  holds the service and DTOs/VOs interfaces 
        exposed to the flex front-end (from the bash_java_core).
   		The DTOs are annotated with @ActionScript and @ActionScriptProperty to prepare the flex VOs code generation.
   		(through aixcept flex-annotations maven plugin)
        </p>    
        </subsection>
        
        <subsection name="bash_blazeds_service_config">
        <p>
        <a href="bash_blazeds_service_config/index.html">bash_blazeds_service_config</a> holds the blazeds service configuration files 
        (services-config.xml and remoting-config.xml) 
		that are required to package a java blazeds back-end application and to compile the associated flex front-end.
    	That's where we'll specify the flex-contrib-spring SpringAutowiringBootstrapService.
        </p>        
        </subsection>
        
        <subsection name="bash_flex_remoted_objects">
        <p>
        <a href="bash_flex_remoted_objects/index.html">bash_flex_remoted_objects</a>: a one file (pom.xml) project
        that holds the generated as3 value object.
    	Those VOs are generated from the bash_java_service_api Java VOs (through flex-annotation).
    	The plugin produces the AS3 source files, and those are compiled and packaged into a swc.
        </p>        
        </subsection>
        
        <subsection name="bash_flex_app">
        <p>
        <a href="bash_flex_app/index.html">bash_flex_app</a> :This project hold the flex (blazeds enabled) flex front-end.
		Its architecture is based on adobe consulting mvn framework: cairngorm.
        </p>        
        </subsection>
        
        <subsection name="bash_java_webapp">
        <p>
        <a href="bash_java_webapp/index.html">bash_java_webapp</a> : this project hold the web application files (mainly configuration and deployment file). 
	It will package all the above project into a single coherent war ready to deploy and test (launching mvn:jetty-exploded for instance)
        
        </p>        
        </subsection>
        
        </section>
        
        <section name="About flex-contrib-spring">
        <p>
         flex-contrib-spring is a remix  of different flex remoting and spring integration contributions available on the web.
    	Docummented at <a href="http://code.google.com/p/fna/wiki/flexContribSpring">http://code.google.com/p/fna/wiki/flexContribSpring</a>
          </p>        
        </section>
 
    </body>
</document>
