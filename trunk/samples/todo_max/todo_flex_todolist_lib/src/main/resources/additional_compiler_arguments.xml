<flex-config>
    <compiler>
        <!-- compiler.allow-source-path-overlap: checks if a source-path entry is a subdirectory of another source-path entry. It helps make the package names of MXML components unambiguous.-->
        <allow-source-path-overlap>false</allow-source-path-overlap>
        <!-- compiler.debug: generates a movie that is suitable for debugging-->
        <debug>true</debug>
        <!-- compiler.keep-as3-metadata: keep the specified metadata in the SWF-->
        <keep-as3-metadata>
            <name>SyncId</name>
        </keep-as3-metadata>
        <!-- compiler.locale: specifies the locale for internationalization-->
        <locale>
            <locale-element>en_US</locale-element>
        </locale>
        <!-- compiler.optimize: Enable post-link SWF optimization-->
        <optimize>true</optimize>
        <!-- compiler.show-actionscript-warnings: runs the AS3 compiler in a mode that detects legal but potentially incorrect code-->
        <show-actionscript-warnings>true</show-actionscript-warnings>
        <!-- compiler.show-binding-warnings: toggle whether warnings generated from data binding code are displayed-->
        <show-binding-warnings>true</show-binding-warnings>
        <!-- compiler.show-shadowed-device-font-warnings: toggles whether warnings are displayed when an embedded font name shadows a device font name-->
        <show-shadowed-device-font-warnings>false</show-shadowed-device-font-warnings>
        <!-- compiler.show-unused-type-selector-warnings: toggle whether warnings generated from unused CSS type selectors are displayed-->
        <show-unused-type-selector-warnings>false</show-unused-type-selector-warnings>
        <!-- compiler.strict: runs the AS3 compiler in strict error checking mode.-->
        <strict>true</strict>
        <!-- compiler.theme: list of CSS or SWC files to apply as a theme-->
       
        <!-- compiler.use-resource-bundle-metadata: determines whether resources bundles are included in the application.-->
        <use-resource-bundle-metadata>true</use-resource-bundle-metadata>
        <!-- compiler.verbose-stacktraces: save callstack information to the SWF for debugging-->
        <verbose-stacktraces>true</verbose-stacktraces>
        <!-- compiler.warn-array-tostring-changes: Array.toString() format has changed.-->
        <warn-array-tostring-changes>false</warn-array-tostring-changes>
        <!-- compiler.warn-assignment-within-conditional: Assignment within conditional.-->
        <warn-assignment-within-conditional>true</warn-assignment-within-conditional>
        <!-- compiler.warn-bad-array-cast: Possibly invalid Array cast operation.-->
        <warn-bad-array-cast>true</warn-bad-array-cast>
        <!-- compiler.warn-bad-bool-assignment: Non-Boolean value used where a Boolean value was expected.-->
        <warn-bad-bool-assignment>true</warn-bad-bool-assignment>
        <!-- compiler.warn-bad-date-cast: Invalid Date cast operation.-->
        <warn-bad-date-cast>true</warn-bad-date-cast>
        <!-- compiler.warn-bad-es3-type-method: Unknown method.-->
        <warn-bad-es3-type-method>true</warn-bad-es3-type-method>
        <!-- compiler.warn-bad-es3-type-prop: Unknown property.-->
        <warn-bad-es3-type-prop>true</warn-bad-es3-type-prop>
        <!-- compiler.warn-bad-nan-comparison: Illogical comparison with NaN. Any comparison operation involving NaN will evaluate to false because NaN != NaN.-->
        <warn-bad-nan-comparison>true</warn-bad-nan-comparison>
        <!-- compiler.warn-bad-null-assignment: Impossible assignment to null.-->
        <warn-bad-null-assignment>true</warn-bad-null-assignment>
        <!-- compiler.warn-bad-null-comparison: Illogical comparison with null.-->
        <warn-bad-null-comparison>true</warn-bad-null-comparison>
        <!-- compiler.warn-bad-undefined-comparison: Illogical comparison with undefined.  Only untyped variables (or variables of type *) can be undefined.-->
        <warn-bad-undefined-comparison>true</warn-bad-undefined-comparison>
        <!-- compiler.warn-boolean-constructor-with-no-args: Boolean() with no arguments returns false in ActionScript 3.0.  Boolean() returned undefined in ActionScript 2.0.-->
        <warn-boolean-constructor-with-no-args>false</warn-boolean-constructor-with-no-args>
        <!-- compiler.warn-changes-in-resolve: __resolve is no longer supported.-->
        <warn-changes-in-resolve>false</warn-changes-in-resolve>
        <!-- compiler.warn-class-is-sealed: Class is sealed.  It cannot have members added to it dynamically.-->
        <warn-class-is-sealed>true</warn-class-is-sealed>
        <!-- compiler.warn-const-not-initialized: Constant not initialized.-->
        <warn-const-not-initialized>true</warn-const-not-initialized>
        <!-- compiler.warn-constructor-returns-value: Function used in new expression returns a value.  Result will be what the function returns, rather than a new instance of that function.-->
        <warn-constructor-returns-value>false</warn-constructor-returns-value>
        <!-- compiler.warn-deprecated-event-handler-error: EventHandler was not added as a listener.-->
        <warn-deprecated-event-handler-error>false</warn-deprecated-event-handler-error>
        <!-- compiler.warn-deprecated-function-error: Unsupported ActionScript 2.0 function.-->
        <warn-deprecated-function-error>true</warn-deprecated-function-error>
        <!-- compiler.warn-deprecated-property-error: Unsupported ActionScript 2.0 property.-->
        <warn-deprecated-property-error>true</warn-deprecated-property-error>
        <!-- compiler.warn-duplicate-argument-names: More than one argument by the same name.-->
        <warn-duplicate-argument-names>true</warn-duplicate-argument-names>
        <!-- compiler.warn-duplicate-variable-def: Duplicate variable definition -->
        <warn-duplicate-variable-def>true</warn-duplicate-variable-def>
        <!-- compiler.warn-for-var-in-changes: ActionScript 3.0 iterates over an object's properties within a "for x in target" statement in random order.-->
        <warn-for-var-in-changes>false</warn-for-var-in-changes>
        <!-- compiler.warn-import-hides-class: Importing a package by the same name as the current class will hide that class identifier in this scope.-->
        <warn-import-hides-class>true</warn-import-hides-class>
        <!-- compiler.warn-instance-of-changes: Use of the instanceof operator.-->
        <warn-instance-of-changes>true</warn-instance-of-changes>
        <!-- compiler.warn-internal-error: Internal error in compiler.-->
        <warn-internal-error>true</warn-internal-error>
        <!-- compiler.warn-level-not-supported: _level is no longer supported. For more information, see the flash.display package.-->
        <warn-level-not-supported>true</warn-level-not-supported>
        <!-- compiler.warn-missing-namespace-decl: Missing namespace declaration (e.g. variable is not defined to be public, private, etc.).-->
        <warn-missing-namespace-decl>true</warn-missing-namespace-decl>
        <!-- compiler.warn-negative-uint-literal: Negative value will become a large positive value when assigned to a uint data type.-->
        <warn-negative-uint-literal>true</warn-negative-uint-literal>
        <!-- compiler.warn-no-constructor: Missing constructor.-->
        <warn-no-constructor>false</warn-no-constructor>
        <!-- compiler.warn-no-explicit-super-call-in-constructor: The super() statement was not called within the constructor.-->
        <warn-no-explicit-super-call-in-constructor>false</warn-no-explicit-super-call-in-constructor>
        <!-- compiler.warn-no-type-decl: Missing type declaration.-->
        <warn-no-type-decl>true</warn-no-type-decl>
        <!-- compiler.warn-number-from-string-changes: In ActionScript 3.0, white space is ignored and '' returns 0. Number() returns NaN in ActionScript 2.0 when the parameter is '' or contains white space.-->
        <warn-number-from-string-changes>false</warn-number-from-string-changes>
        <!-- compiler.warn-scoping-change-in-this: Change in scoping for the this keyword.  Class methods extracted from an instance of a class will always resolve this back to that instance.  In ActionScript 2.0 this is looked up dynamically based on where the method is invoked from.-->
        <warn-scoping-change-in-this>false</warn-scoping-change-in-this>
        <!-- compiler.warn-slow-text-field-addition: Inefficient use of += on a TextField.-->
        <warn-slow-text-field-addition>true</warn-slow-text-field-addition>
        <!-- compiler.warn-unlikely-function-value: Possible missing parentheses.-->
        <warn-unlikely-function-value>true</warn-unlikely-function-value>
        <!-- compiler.warn-xml-class-has-changed: Possible usage of the ActionScript 2.0 XML class.-->
        <warn-xml-class-has-changed>false</warn-xml-class-has-changed>
    </compiler>
</flex-config>
